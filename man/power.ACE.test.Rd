% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/umxPower.R
\name{power.ACE.test}
\alias{power.ACE.test}
\title{Test the power of an ACE model to detect A, C, or E}
\usage{
power.ACE.test(nMZpairs = 500, nDZpairs = nMZpairs,
  drop = c("a_r1c1"), value = 0, AA = 0.5, CC = 0, EE = NULL,
  sig.level = 0.05, power = 0.8, type = c("univariate", "bivariate",
  "GxE"), method = c("ncp", "empirical"), search = FALSE,
  tryHard = c("no", "yes", "mxTryHard", "mxTryHardOrdinal",
  "mxTryHardWideSearch"), optimizer = NULL)
}
\arguments{
\item{nDZpairs}{= nMZpairs}

\item{drop}{= c("a_r1c1")}

\item{value}{= 0}

\item{AA}{= .5}

\item{sig.level}{= 0.05}

\item{power}{= .8}

\item{type}{= c("univariate", "bivariate", "GxE")}

\item{method}{= c("ncp", "empirical")}

\item{search}{= FALSE}

\item{tryHard}{= c("no", "yes", "mxTryHard", "mxTryHardOrdinal", "mxTryHardWideSearch")}

\item{optimizer}{= NULL}

\item{nMZpairs=}{500}

\item{CC=}{0}

\item{EE=}{NULL}
}
\value{
\itemize{
\item nothing
}
}
\description{
\code{power.ACE.test} simulates a univariate ACE model and returns the power to detect dropping one or more label.
The interface and functionality of this service are experimental and subject to change.
}
\details{
This is under construction.
}
\examples{

# =====================
# = Power to detect A =
# =====================
power.ACE.test(nMZpairs= 500, nDZpairs = 1000, drop = c("a_r1c1"), value = 0, AA= .5, CC= 0)

# =====================
# = Power to detect C =
# =====================

power.ACE.test(nMZpairs= 500, nDZpairs = 1000, drop = c("a_r1c1"), value = 0, AA= .5, CC= .3)

# ========================================
# = Drop More than one parameter (A & C) =
# ========================================
# power.ACE.test(nMZpairs= 500, nDZpairs = 1000, drop = c("^[ac]_r1c1"), value = 0, AA= .5, CC= .3, tryHard= "yes")

# ===================
# = Show range of N =
# ===================
power.ACE.test(nMZpairs= 500, nDZpairs = 1000, drop = c("a_r1c1"), AA= .5, CC= 0, search = TRUE)

# =====================================
# = Compare ncp and empirical methods =
# =====================================
power.ACE.test(nMZpairs= 500, nDZpairs = 1000, drop = c("a_r1c1"), AA= .5, CC= 0, method = "empirical")

# ================================
# = Power with more DZs than MZs =
# ================================

power.ACE.test(nMZpairs= 500, nDZpairs = 2000, drop = c("a_r1c1"), value = 0, AA= .5, CC= 0)

# ================================
# = Power with more MZs than DZs =
# ================================

power.ACE.test(nMZpairs= 2000, nDZpairs = 1000, drop = c("a_r1c1"), value = 0, AA= .5, CC= 0)

# ===========================
# = Pick a value (not zero) =
# ===========================

power.ACE.test(nMZpairs= 2000, nDZpairs = 1000, drop = c("a_r1c1"), value = .2, AA= .5, CC= 0)

# ===================================
# = Test dropping a series of paths =
# ===================================
# or just get people to call it repeatedly?
for (dropWhat in drop) {

}

}
\references{
\itemize{
\item \link{https://github.com/tbates/umx}, \link{https://tbates.github.io}
}
}
\seealso{
\itemize{
\item \code{\link[OpenMx:mxPower]{OpenMx::mxPower()}}
}

Other Twin Modeling Functions: \code{\link{umxACE_cov_fixed}},
  \code{\link{umxACEcov}}, \code{\link{umxACEold}},
  \code{\link{umxACEv}}, \code{\link{umxACE}},
  \code{\link{umxCPold}}, \code{\link{umxCP}},
  \code{\link{umxGxE_window}}, \code{\link{umxGxEbiv}},
  \code{\link{umxGxE}}, \code{\link{umxIPold}},
  \code{\link{umxIP}}, \code{\link{umxSexLim}},
  \code{\link{umxSimplex}}, \code{\link{umxSummaryACEcov}},
  \code{\link{umxSummaryACEv}},
  \code{\link{umxSummaryACE}}, \code{\link{umxSummaryCP}},
  \code{\link{umxSummaryGxEbiv}},
  \code{\link{umxSummaryGxE}}, \code{\link{umxSummaryIP}},
  \code{\link{umxSummarySexLim}},
  \code{\link{umxSummarySimplex}}, \code{\link{umx}},
  \code{\link{xmu_twin_check}}
}
\concept{Twin Modeling Functions}
