% Generated by roxygen2 (4.0.0): do not edit by hand
\docType{package}
\name{umx}
\alias{umx}
\alias{umx-package}
\title{Helper functions for OpenMx}
\description{
umx allows you to more easily build, run, modify, and report models using OpenMx
with code.
}
\details{
Core functions you're likely to need from \pkg{umx} are
explained in the vignette("umx", package = "umx")
All the functions have explainatory examples, so use the help, even if you think it won't help :-)
Have a look, for example at \code{\link{umxRun}}
There's also a working example below and in demo(umx)

umx lives on github at present \link{http://github.com/tbates/umx}
The easiest way to install it is
install.packages("devtools")
library("devtools")
install_github("tbates/umx")
library("umx")
}
\examples{
require("OpenMx")
require("umx")
data(demoOneFactor)
latents = c("G")
manifests = names(demoOneFactor)
fit1 <- mxModel("One Factor", type="RAM",
	manifestVars = manifests,
	latentVars  = latents,
	mxPath(from = latents, to = manifests),
	mxPath(from = manifests, arrows = 2),
	mxPath(from = latents  , arrows = 2, free = F, values = 1),
	mxData(cov(demoOneFactor), type = "cov", numObs = nrow(demoOneFactor))
)

omxGetParameters(fit1) # nb: By default, paths have no labels, and starts of 0

# umxLabel easily add informative and predictable labels to each free path (works with matrix style as well!)
# and with umxStart, we can easily add sensible guesses for start values...
fit1 = umxLabel(fit1)
fit1 = umxStart(fit1)

# Re-run omxGetParameters...
omxGetParameters(fit1) # Wow! Now your model has informative labels, & better starts

# umxRun the model (calculates saturated models for raw data, & repeats if the model is not code green)
fit1 = umxRun(fit1)

# Let's get some journal-ready fit information

umxSummary(fit1)

# Model updating example
fit2 = omxSetParameters(fit1, labels = "G_to_x1", values = 0, free = F, name = "no_effect_of_g_on_X5")
fit2 = mxRun(fit2)
# Model comparison example
umxCompare(fit1, fit2)

# Same thing with umxReRun
fit2 = umxReRun(fit1, "x5_with_x5", name = "no_residual_onX5")

umxCompare(fit1, fit2)

# And make a Figure it dot format!
# If you have installed GraphViz, the next command will open it for you to see!

# umxPlot(fit1, std = T)
# Run this instead if you don't have GraphViz
umxPlot(fit1, std = T, dotFilename = NA)
}
\references{
- \url{http://www.github.com/tbates/umx}
}

