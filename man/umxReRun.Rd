% Generated by roxygen2 (4.0.0): do not edit by hand
\name{umxReRun}
\alias{umxReRun}
\title{umxReRun}
\usage{
umxReRun(lastFit, dropList = NA, regex = NA, free = F, value = 0,
  freeToStart = NA, name = NULL, verbose = F, intervals = F,
  compare = F)
}
\arguments{
\item{lastFit}{The \code{\link{mxModel}} you wish to update and run.}

\item{dropList}{A list of strings. If not NA, then the labels listed here will be dropped (or set to the value and free state you specify)}

\item{regex}{A regular expression. If not NA, then all labels matching this expression will be dropped (or set to the value and free state you specify)}

\item{free}{The state to set "free" to for the parameters whose labels you specify (defaults to free = FALSE, i.e., fixed)}

\item{value}{The value to set the parameters whose labels you specify too (defaults to 0)}

\item{freeToStart}{Whether to update parameters based on their current free-state. free = c(TRUE, FALSE, NA), (defaults to NA - i.e, not checked)}

\item{name}{The name for the new model}

\item{verbose}{How much feedback to give}

\item{intervals}{Whether to run confidence intervals (see \code{\link{mxRun}})}

\item{comparison}{Whether to run umxCompare() after umxRun}
}
\value{
- \code{\link{mxModel}}
}
\description{
umxReRun Is a convenience function to re-run an \code{\link{mxModel}}, optionally dropping parameters
The main value for umxReRun is compactness. So this one-liner drops a path labelled "Cs", and returns the updated model:
fit2 = umxReRun(fit1, dropList = "Cs", name = "newModelName")
}
\details{
If you're a beginner, stick to
fit2 = omxSetParameters(fit1, labels = "Cs", values = 0, free = F, name = "newModelName")
fit2 = mxRun(fit2)
}
\examples{
require(OpenMx)
data(demoOneFactor)
latents  = c("G")
manifests = names(demoOneFactor)
m1 <- mxModel("One Factor", type = "RAM",
	manifestVars = manifests, latentVars = latents,
	mxPath(from = latents, to = manifests),
	mxPath(from = manifests, arrows = 2),
	mxPath(from = latents, arrows = 2, free = F, values = 1.0),
	mxData(cov(demoOneFactor), type = "cov", numObs = 500)
)
m1 = umxRun(m1, setLabels = T, setValues = T)
m2 = umxReRun(m1, dropList = "G_to_x1", name = "drop_X1")
umxSummary(m2)
umxCompare(m1,m2)
\dontrun{
fit2 = umxReRun(fit1, dropList = "E_to_heartRate", name = "drop_cs")
fit2 = umxReRun(fit1, regex = "^E.*rate", name = "drop_hr")
fit2 = umxReRun(fit1, regex = "^E", free=T, value=.2, name = "free_E")
fit2 = umxReRun(fit1, regex = "Cs", name="AEip", compare = T)
}
}
\references{
- http://openmx.psyc.virginia.edu/
}
\seealso{
- \code{\link{mxRun}}, \code{\link{umxLabel}}, \code{\link{omxGetParameters}}
}

