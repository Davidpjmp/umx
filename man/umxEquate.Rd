% Generated by roxygen2 (4.0.0): do not edit by hand
\name{umxEquate}
\alias{umxEquate}
\title{umxEquate}
\usage{
umxEquate(model, master, slave, free = T, verbose = T, name = NULL)
}
\arguments{
  \item{model}{an \code{\link{mxModel}} within which to
  equate chosen parameters}

  \item{master}{A list of labels with which slave labels
  will be equated}

  \item{slave}{A list of labels which will be updated to
  match master labels, thus equating the parameters}

  \item{free}{Boolean determining what the initial state is
  of master and slave parameters. Allows stepping over
  parameters if they are in a particular state}

  \item{verbose}{How much feedback will be given}

  \item{name}{Optional new name for the returned model}
}
\value{
- \code{\link{mxModel}}
}
\description{
Equate parameters by setting one or more labels (the slave set) equal
to the labels in a master set. By setting two parameters to have the
\code{\link{umxLabel}}, they are then forced to have the same value.
In addition to matching labels, you may wish to learn about set the
label of a slave parameter to the \"square bracket\" address of the
master, i.e. \"model.matrix[r,c]\".
tip: to find labels of free parameters use \code{\link{umxGetParameters}} with free = T
}
\examples{
require(OpenMx)
data(demoOneFactor)
latents  = c("G")
manifests = names(demoOneFactor)
m1 <- mxModel("One Factor", type = "RAM",
	manifestVars = manifests, latentVars = latents,
	mxPath(from = latents, to = manifests),
	mxPath(from = manifests, arrows = 2),
	mxPath(from = latents, arrows = 2, free = F, values = 1.0),
	mxData(cov(demoOneFactor), type = "cov", numObs = 500)
)
m1 = umxRun(m1, setLabels = T, setValues = T)
m2 = umxEquate(m1, master = "G_to_x1", slave = "G_to_x2", name = "Equate x1 and x2 loadings")
m2 = mxRun(m2) # have to run the model again...
umxCompare(m1, m2) # not good :-)
umxSummary(m1, m2) # not good :-)
}
\references{
- \url{http://openmx.psyc.virginia.edu}
}
\seealso{
- \code{\link{umxLabel}}, \code{\link{umxGetParameters}}, \code{\link{umxRun}}
}

